{"docstore/data": {"ac9b8bea-9c02-480e-9a8b-102a42d87e21": {"__data__": {"id_": "ac9b8bea-9c02-480e-9a8b-102a42d87e21", "embedding": null, "metadata": {"file_name": "index.d.ts", "relative_path": "node_modules/agentkeepalive/index.d.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "ffbd3772be303d0e9a7ad6312816252f", "node_type": "4", "metadata": {"file_name": "index.d.ts", "relative_path": "node_modules/agentkeepalive/index.d.ts"}, "hash": "133c64c401add82a2edaed7528c170efa9bae7c17101735c71bf6e109cb7ba8d"}}, "hash": "52516dfdd3aefc1cc1f55fcb5350d9b8b8225df3d3851f8a22895d69caa03bd4", "text": "import * as http from 'http';\nimport * as https from 'https';\nimport * as net from 'net';\n\ninterface PlainObject {\n  [key: string]: any;\n}\n\ndeclare class HttpAgent extends http.Agent {\n  constructor(opts?: AgentKeepAlive.HttpOptions);\n  readonly statusChanged: boolean;\n  createConnection(options: net.NetConnectOpts, cb?: Function): net.Socket;\n  createSocket(req: http.IncomingMessage, options: http.RequestOptions, cb: Function): void;\n  getCurrentStatus(): AgentKeepAlive.AgentStatus;\n}\n\ninterface Constants {\n  CURRENT_ID: Symbol;\n  CREATE_ID: Symbol;\n  INIT_SOCKET: Symbol;\n  CREATE_HTTPS_CONNECTION: Symbol;\n  SOCKET_CREATED_TIME: Symbol;\n  SOCKET_NAME: Symbol;\n  SOCKET_REQUEST_COUNT: Symbol;\n  SOCKET_REQUEST_FINISHED_COUNT: Symbol;\n}\n\ndeclare class AgentKeepAlive extends HttpAgent {}\n\ndeclare namespace AgentKeepAlive {\n  export interface AgentStatus {\n    createSocketCount: number;\n    createSocketErrorCount: number;\n    closeSocketCount: number;\n    errorSocketCount: number;\n    timeoutSocketCount: number;\n    requestCount: number;\n    freeSockets: PlainObject;\n    sockets: PlainObject;\n    requests: PlainObject;\n  }\n\n  interface CommonHttpOption {\n    keepAlive?: boolean | undefined;\n    freeSocketTimeout?: number | undefined;\n    freeSocketKeepAliveTimeout?: number | undefined;\n    timeout?: number | undefined;\n    socketActiveTTL?: number | undefined;\n  }\n\n  export interface HttpOptions extends http.AgentOptions, CommonHttpOption { }\n  export interface HttpsOptions extends https.AgentOptions, CommonHttpOption { }\n\n  export class HttpsAgent extends https.Agent {\n    constructor(opts?: HttpsOptions);\n    readonly statusChanged: boolean;\n    createConnection(options: net.NetConnectOpts, cb?: Function): net.Socket;\n    createSocket(req: http.IncomingMessage, options: http.RequestOptions, cb: Function): void;\n    getCurrentStatus(): AgentStatus;\n  }\n\n  export const constants: Constants;\n}\n\nexport = AgentKeepAlive;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c228d486-0d00-4103-a9f5-bfde0af0363c": {"__data__": {"id_": "c228d486-0d00-4103-a9f5-bfde0af0363c", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "82b9dfaa47805f15c1e74aec23980c8f028175d259e18156745ffe113dc85e69"}, "3": {"node_id": "8d2b90d4-f4a6-4cc8-bf3a-69cf52195ce3", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "0ece4a5bf6f0d23b6a3a42b84eb45fecc3d308dd589e10a709e6b7f86c95680f"}}, "hash": "00c88aca893567d6c290e00e531bdfdc44664b27fb3652ea41a113943b5dd5ef", "text": "import { Request, Response } from \"express\";\nimport {\n  fetchCompanyDetails,\n  fetchFlexibleProjects,\n  fetchListOfCountries,\n  fetchListOfProjects,\n  fetchListOfSectors,\n  fetchProjectFromCountry,\n  fetchProjectsBySector,\n  fetchTopCompaniesByInvestmentCount,\n} from \"./services\";\n\nexport function HandleRoot(req: Request, res: Response) {\n  res.send({\n    status: \"Sucess\",\n  });\n}\n\nexport async function HandleInvestmentList(req: Request, res: Response) {\n  const queryParams = req.query;\n  const firstStr = queryParams.first as string | undefined;\n  try {\n    let projects = await fetchListOfProjects();\n    if (firstStr) {\n      const n = parseInt(firstStr);\n      if (isNaN(n) || n < 1) {\n        return res.status(400);\n      }\n      projects = projects.slice(0, n);\n    }\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsByCountry(req: Request, res: Response) {\n  const queryParams = req.query;\n  const country = queryParams.country as string;\n  try {\n    let projects = await fetchProjectFromCountry(country);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsBySector(req: Request, res: Response) {\n  const queryParams = req.query;\n  const sector = queryParams.sector as string;\n  if (!sector) {\n    return res.status(400).send(\"Sector parameter is required\");\n  }\n  try {\n    const projects = await fetchProjectsBySector(sector);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(500).send(err.message);\n  }\n}\n\nexport async function HandleTopCompaniesByInvestmentCount(\n  req: Request,\n  res: Response,\n) {\n  try {\n    const topCompanies = await fetchTopCompaniesByInvestmentCount();\n    return res.json(topCompanies);\n  } catch (err: any) {\n    console.log(err);\n    return res.sendStatus(500);\n  }\n}\n\nexport async function HandleFlexibleProjects(req: Request, res: Response) {\n  const queryParams = req.query;\n  const options: {\n    filterBy?: { [key: string]: any };\n    sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n    limit?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "8d2b90d4-f4a6-4cc8-bf3a-69cf52195ce3": {"__data__": {"id_": "8d2b90d4-f4a6-4cc8-bf3a-69cf52195ce3", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "82b9dfaa47805f15c1e74aec23980c8f028175d259e18156745ffe113dc85e69"}, "2": {"node_id": "c228d486-0d00-4103-a9f5-bfde0af0363c", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "00c88aca893567d6c290e00e531bdfdc44664b27fb3652ea41a113943b5dd5ef"}}, "hash": "0ece4a5bf6f0d23b6a3a42b84eb45fecc3d308dd589e10a709e6b7f86c95680f", "text": ": number;\n  } = {};\n\n  if (queryParams.filterBy) {\n    options.filterBy = JSON.parse(queryParams.filterBy as string);\n  }\n  if (queryParams.sortBy) {\n    options.sortBy = JSON.parse(queryParams.sortBy as string);\n  }\n  if (queryParams.limit) {\n    options.limit = parseInt(queryParams.limit as string);\n  }\n\n  try {\n    const projects = await fetchFlexibleProjects(options);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleListOfCountries(req: Request, res: Response) {\n  try {\n    const countries = await fetchListOfCountries();\n    return res.json(countries);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleSectorList(req: Request, res: Response) {\n  try {\n    const sectors = await fetchListOfSectors();\n    return res.json(sectors);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\n// export async function HandleCompanyDetails(req: Request, res: Response) {\n//   const queryParams = req.query;\n//   const companyName = queryParams.name as string;\n//   if (!companyName) {\n//     return res.status(400).send(\"Company name parameter is required\");\n//   }\n//   try {\n//     const companyDetails = await fetchCompanyDetails(companyName);\n//     if (companyDetails) {\n//       return res.json(companyDetails);\n//     } else {\n//       return res.status(404).send(\"Company not found\");\n//     }\n//   } catch (err: any) {\n//     console.log(err);\n//     return res.status(500).send(err.message);\n//   }\n// }\n\nexport async function HandleCompanyDetails(req: Request, res: Response) {\n  const queryParams = req.query;\n  const companyName = queryParams.name as string;\n  if (!companyName) {\n    return res.status(400).send(\"Company name parameter is required\");\n  }\n  try {\n    const companyDetails = await fetchCompanyDetails(companyName);\n    if (companyDetails) {\n      return res.json(companyDetails);\n    } else {\n      return res.status(404).send(\"Company not found\");\n    }\n  } catch (err: any) {\n    console.log(err);\n    return res.status(500).send(err.message);\n  }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "941ebfa8-9f4d-4aff-930a-af76eaa0ea69": {"__data__": {"id_": "941ebfa8-9f4d-4aff-930a-af76eaa0ea69", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "e80907360c88824c938a07a01e9d5207fd702297140ed0d3c7149be4fb058436"}, "3": {"node_id": "9db35748-60f4-4d18-bcf2-57bbdedac0dc", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "55fa5c570637da09c5f42f16ff48371ecdae310311dae320b1ee72babe79027f"}}, "hash": "dfdec3c5df4f0b37139712ca77a6d3516782099d5d2d6ab80d581674745ea7cf", "text": "import sqlite3, { Database } from \"sqlite3\";\n\nexport class DatabaseService {\n  private static projectDB: Database | null = null;\n  private static companyDB: Database | null = null;\n  private static investsDB: Database | null = null;\n\n  public static getProjectConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.projectDB = new sqlite3.Database(\n        \"Project_Table.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static getCompanyConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.companyDB = new sqlite3.Database(\n        \"Investment_Company.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static getInvestsInConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.investsDB = new sqlite3.Database(\n        \"Invests_in.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static closeDbConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (DatabaseService.projectDB) {\n        DatabaseService.projectDB.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            DatabaseService.projectDB = null;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\nexport interface Project {\n  Month: string;\n  Year: string;\n  Sector: string;\n  Country: string;\n  Region: string;\n  Greenfield: string;\n  Source: string;\n  Project_id: string;\n}\n\nexport interface Investment_Company {\n  Investor: string;\n  SOE: string;\n}\n\nexport interface CompanyData {\n  Company: Investment_Company;\n  Projects: Project[];\n}\n\nexport interface Invests_In {\n  Project_id: string;\n  Investor: string;\n  Amount: string;\n}\n\nexport interface Survey {\n  Survey_id: string;\n  List_of_Answers: string[];\n  List_of_Questions: string[];", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "9db35748-60f4-4d18-bcf2-57bbdedac0dc": {"__data__": {"id_": "9db35748-60f4-4d18-bcf2-57bbdedac0dc", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "e80907360c88824c938a07a01e9d5207fd702297140ed0d3c7149be4fb058436"}, "2": {"node_id": "941ebfa8-9f4d-4aff-930a-af76eaa0ea69", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "dfdec3c5df4f0b37139712ca77a6d3516782099d5d2d6ab80d581674745ea7cf"}, "3": {"node_id": "2a8b320d-349a-4d6d-87a1-6431333322b3", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "5ae137e93968d963ec7e8aa288a5346809f7cc98420d5dde8d4692880c4d54c9"}}, "hash": "55fa5c570637da09c5f42f16ff48371ecdae310311dae320b1ee72babe79027f", "text": "List_of_Questions: string[];\n  Answer_Date: Date;\n}\n\nexport interface Is_About {\n  Project_id: string;\n  Survey_id: string;\n  Proximity: number;\n}\n\nexport function fetchListOfProjects(): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Project\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectsByCompany(): Promise<any[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT Investment_Company.Name, Project.* \n        FROM Investment_Company \n        JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id \n        JOIN Project ON Invest_In.Project_id = Project.Project_id\n      `;\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows);\n      }\n    });\n  });\n}\n\nexport function fetchSOEs(): Promise<Investment_Company[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Investment_Company WHERE SOE = 'Yes'\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Investment_Company[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectFromRegion(region: string): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    //const db = new sqlite3.Database('new_blog.db');\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT * FROM Project \n        WHERE Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a8b320d-349a-4d6d-87a1-6431333322b3": {"__data__": {"id_": "2a8b320d-349a-4d6d-87a1-6431333322b3", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "e80907360c88824c938a07a01e9d5207fd702297140ed0d3c7149be4fb058436"}, "2": {"node_id": "9db35748-60f4-4d18-bcf2-57bbdedac0dc", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "55fa5c570637da09c5f42f16ff48371ecdae310311dae320b1ee72babe79027f"}}, "hash": "5ae137e93968d963ec7e8aa288a5346809f7cc98420d5dde8d4692880c4d54c9", "text": "`;\n    db.all(sql, [region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n            SELECT Project.* \n            FROM Project \n            JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n            WHERE Investment_Company.Name = ? AND Project.Region = ?\n        `;\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1d561073-6bf0-48f8-9f23-e1d590fa84c2": {"__data__": {"id_": "1d561073-6bf0-48f8-9f23-e1d590fa84c2", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "7dbb6dc5d52659b2ee9efa055ceda7f275652a5276b2c2fee868b33011eff986"}, "3": {"node_id": "d41748c9-970f-426a-9386-708fe3d6f8e5", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "9de903287aae0b6c67c0dec92ef8256e29e0d1f247e47cdbd3e048fc3e2ec147", "text": "import {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "d41748c9-970f-426a-9386-708fe3d6f8e5": {"__data__": {"id_": "d41748c9-970f-426a-9386-708fe3d6f8e5", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "7dbb6dc5d52659b2ee9efa055ceda7f275652a5276b2c2fee868b33011eff986"}, "2": {"node_id": "1d561073-6bf0-48f8-9f23-e1d590fa84c2", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "9de903287aae0b6c67c0dec92ef8256e29e0d1f247e47cdbd3e048fc3e2ec147"}, "3": {"node_id": "896db9db-4a4c-4038-b915-360b4e18cbbd", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "5e5303577246a49868cd1622d24ea5296b20993ca8a2c2b118de324867aacb5f"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "896db9db-4a4c-4038-b915-360b4e18cbbd": {"__data__": {"id_": "896db9db-4a4c-4038-b915-360b4e18cbbd", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "7dbb6dc5d52659b2ee9efa055ceda7f275652a5276b2c2fee868b33011eff986"}, "2": {"node_id": "d41748c9-970f-426a-9386-708fe3d6f8e5", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}, "3": {"node_id": "14f312b4-e2ae-435d-b985-620d96c34bf2", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "340be3d32b1da3f382c3a87ebb33681ecc0f80285004e5fe41d8c8a091c3dbb4"}}, "hash": "5e5303577246a49868cd1622d24ea5296b20993ca8a2c2b118de324867aacb5f", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  console.log(countries);\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchCompanyDetails(\n  companyName: string,\n): Promise<CompanyData> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const companySql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n  const projectsSql = `\n    SELECT Project.*\n    FROM Project\n    JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n    WHERE Investment_Company.Investor = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "14f312b4-e2ae-435d-b985-620d96c34bf2": {"__data__": {"id_": "14f312b4-e2ae-435d-b985-620d96c34bf2", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "7dbb6dc5d52659b2ee9efa055ceda7f275652a5276b2c2fee868b33011eff986"}, "2": {"node_id": "896db9db-4a4c-4038-b915-360b4e18cbbd", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "5e5303577246a49868cd1622d24ea5296b20993ca8a2c2b118de324867aacb5f"}}, "hash": "340be3d32b1da3f382c3a87ebb33681ecc0f80285004e5fe41d8c8a091c3dbb4", "text": "`;\n\n  const companyPromise = new Promise<Investment_Company | null>(\n    (resolve, reject) => {\n      db.get(companySql, [companyName], (err, row) => {\n        if (err) reject(err);\n        else resolve(row as Investment_Company | null);\n      });\n    },\n  );\n\n  const projectsPromise = new Promise<Project[]>((resolve, reject) => {\n    db.all(projectsSql, [companyName], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  try {\n    const company = await companyPromise;\n    const projects = await projectsPromise;\n    return {\n      Company: company!,\n      Projects: projects,\n    };\n  } catch (error) {\n    throw error;\n  }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "a8b2c7be-2c0c-432b-adb3-0241c5490eba": {"__data__": {"id_": "a8b2c7be-2c0c-432b-adb3-0241c5490eba", "embedding": null, "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df49dd8d1060c55ab387af297325057e", "node_type": "4", "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "hash": "e01e8dc8f44f35cb1e54857b8cfb3fa4ce347dbb22c53979789f133960f63452"}}, "hash": "db8b603f4410148a5876f3c9e6b43d5b692f63f8c62706cfef0a2c296b190f18", "text": "import express from \"express\";\nimport cors from \"cors\";\nimport {\n  HandleCompanyDetails,\n  HandleFlexibleProjects,\n  HandleInvestmentList,\n  HandleInvestmentsByCountry,\n  HandleInvestmentsBySector,\n  HandleListOfCountries,\n  HandleRoot,\n  HandleSectorList,\n  HandleTopCompaniesByInvestmentCount,\n} from \"./handlers\";\nimport { DatabaseService, fetchListOfProjects } from \"./database\";\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\n// Start the database connection\nDatabaseService.getProjectConnection();\n\napp.get(\"/\", HandleRoot);\napp.get(\"/investments/\", HandleInvestmentList);\napp.get(\"/investments/by_country\", HandleInvestmentsByCountry);\napp.get(\"/investments/by_sector\", HandleInvestmentsBySector);\n\napp.get(\"/companies/top_investments\", HandleTopCompaniesByInvestmentCount);\napp.get(\"/countries\", HandleListOfCountries);\napp.get(\"/sectors\", HandleSectorList);\napp.get(\"/flexible_projects\", HandleFlexibleProjects);\napp.get(\"/company/details\", HandleCompanyDetails);\n\napp.listen(port, () => {\n  console.log(\"Server running \u26a1\ufe0f\");\n});", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0dc10091-dec1-4c1f-ba92-1b63dfcd1f29": {"__data__": {"id_": "0dc10091-dec1-4c1f-ba92-1b63dfcd1f29", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "da2e8dd0b6757c69f583690c70f8871a4c9bc68477e72547012a371573c75e50"}, "3": {"node_id": "733398b2-b7ee-4130-8403-c0ce7fa361e0", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "7173593847a6985f302ea5a7a62938a6bed3bc83bb0e1204092dead96ecb8cc1"}}, "hash": "7d7ad8ba128336f69e2ea8403a1b6a3623da3a9215a61bc105fb757382bf77e3", "text": "import { Request, Response } from \"express\";\nimport {\n  fetchFlexibleProjects,\n  fetchInvestsInByProjectId,\n  fetchListOfCountries,\n  fetchListOfProjects,\n  fetchListOfSectors,\n  fetchProjectFromCountry,\n  fetchProjectsBySector,\n  fetchTopCompaniesByInvestmentCount,\n} from \"./services\";\n\nexport function HandleRoot(req: Request, res: Response) {\n  res.send({\n    status: \"Sucess\",\n  });\n}\n\nexport async function HandleInvestmentList(req: Request, res: Response) {\n  const queryParams = req.query;\n  const firstStr = queryParams.first as string | undefined;\n  try {\n    let projects = await fetchListOfProjects();\n    if (firstStr) {\n      const n = parseInt(firstStr);\n      if (isNaN(n) || n < 1) {\n        return res.status(400);\n      }\n      projects = projects.slice(0, n);\n    }\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsByCountry(req: Request, res: Response) {\n  const queryParams = req.query;\n  const country = queryParams.country as string;\n  try {\n    let projects = await fetchProjectFromCountry(country);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsBySector(req: Request, res: Response) {\n  const queryParams = req.query;\n  const sector = queryParams.sector as string;\n  if (!sector) {\n    return res.status(400).send(\"Sector parameter is required\");\n  }\n  try {\n    const projects = await fetchProjectsBySector(sector);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(500).send(err.message);\n  }\n}\n\nexport async function HandleTopCompaniesByInvestmentCount(\n  req: Request,\n  res: Response,\n) {\n  try {\n    const topCompanies = await fetchTopCompaniesByInvestmentCount();\n    return res.json(topCompanies);\n  } catch (err: any) {\n    console.log(err);\n    return res.sendStatus(500);\n  }\n}\n\nexport async function HandleFlexibleProjects(req: Request, res: Response) {\n  const queryParams = req.query;\n  const options: {\n    filterBy?: { [key: string]: any };\n    sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n    limit?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "733398b2-b7ee-4130-8403-c0ce7fa361e0": {"__data__": {"id_": "733398b2-b7ee-4130-8403-c0ce7fa361e0", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "da2e8dd0b6757c69f583690c70f8871a4c9bc68477e72547012a371573c75e50"}, "2": {"node_id": "0dc10091-dec1-4c1f-ba92-1b63dfcd1f29", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "7d7ad8ba128336f69e2ea8403a1b6a3623da3a9215a61bc105fb757382bf77e3"}}, "hash": "7173593847a6985f302ea5a7a62938a6bed3bc83bb0e1204092dead96ecb8cc1", "text": ": number;\n  } = {};\n\n  if (queryParams.filterBy) {\n    options.filterBy = JSON.parse(queryParams.filterBy as string);\n  }\n  if (queryParams.sortBy) {\n    options.sortBy = JSON.parse(queryParams.sortBy as string);\n  }\n  if (queryParams.limit) {\n    options.limit = parseInt(queryParams.limit as string);\n  }\n\n  try {\n    const projects = await fetchFlexibleProjects(options);\n    let results = [];\n    for (let i = 0; i < projects.length; i++) {\n      let invests = await fetchInvestsInByProjectId(projects[i].Project_id);\n      if (invests.length > 0) {\n        let project = projects[i] as any;\n        project.Investor = invests[0].Investor;\n        project.Amount = invests[0].Amount;\n        results.push(project);\n      }\n    }\n    return res.json(results);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleListOfCountries(req: Request, res: Response) {\n  try {\n    const countries = await fetchListOfCountries();\n    return res.json(countries);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleSectorList(req: Request, res: Response) {\n  try {\n    const sectors = await fetchListOfSectors();\n    return res.json(sectors);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\n// export async function HandleCompanyDetails(req: Request, res: Response) {\n//   const queryParams = req.query;\n//   const companyName = queryParams.name as string;\n//   if (!companyName) {\n//     return res.status(400).send(\"Company name parameter is required\");\n//   }\n//   try {\n//     const companyDetails = await fetchCompanyDetails(companyName);\n//     if (companyDetails) {\n//       return res.json(companyDetails);\n//     } else {\n//       return res.status(404).send(\"Company not found\");\n//     }\n//   } catch (err: any) {\n//     console.log(err);\n//     return res.status(500).send(err.message);\n//   }\n// }\n\n// export async function HandleCompanyDetails(req: Request, res: Response) {\n//   const queryParams = req.query;\n//   const companyName = queryParams.name as string;\n//   if (!companyName) {\n//     return res.status(400).send(\"Company name parameter is required\");\n//   }\n//   try {\n//     const companyDetails = await fetchCompanyDetails(companyName);\n//     if (companyDetails) {\n//       return res.json(companyDetails);\n//     } else {\n//       return res.status(404).send(\"Company not found\");\n//     }\n//   } catch (err: any) {\n//     console.log(err);\n//     return res.status(500).send(err.message);\n//   }\n// }", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "64ef9df9-1cef-4190-9dbe-4d221839bd53": {"__data__": {"id_": "64ef9df9-1cef-4190-9dbe-4d221839bd53", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "f29604628613c3618863bfe4b4ac94ab5fce8df709bab4baee0a8be79892a9d4"}, "3": {"node_id": "25ac4852-7725-4922-ae30-f96bdc9a8b06", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "c46b5393fcb156b87d49b389013bd156295ed84fcf96dc20ca2909a615b3621d"}}, "hash": "4d9367a1c08be51bcb6724b799e64d343f832dd7c06ffdfe8c8cd578df848720", "text": "import sqlite3, { Database } from \"sqlite3\";\n\nexport class DatabaseService {\n  private static projectDB: Database | null = null;\n  private static companyDB: Database | null = null;\n  private static investsDB: Database | null = null;\n\n  public static getProjectConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.projectDB = new sqlite3.Database(\n        \"Project_Table.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static getCompanyConnection(): Database | null {\n    if (!DatabaseService.companyDB) {\n      DatabaseService.companyDB = new sqlite3.Database(\n        \"Investment_Company.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.companyDB;\n  }\n\n  public static getInvestsInConnection(): Database | null {\n    if (!DatabaseService.investsDB) {\n      DatabaseService.investsDB = new sqlite3.Database(\n        \"Invests_in.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.investsDB;\n  }\n\n  public static closeDbConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (DatabaseService.projectDB) {\n        DatabaseService.projectDB.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            DatabaseService.projectDB = null;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\nexport interface Project {\n  Month: string;\n  Year: string;\n  Sector: string;\n  Country: string;\n  Region: string;\n  Greenfield: string;\n  Source: string;\n  Project_id: string;\n}\n\nexport interface Investment_Company {\n  Investor: string;\n  SOE: string;\n}\n\nexport interface CompanyData {\n  Company: Investment_Company;\n  Projects: Project[];\n}\n\nexport interface Invests_In {\n  Project_id: string;\n  Investor: string;\n  Amount: string;\n}\n\nexport interface Survey {\n  Survey_id: string;\n  List_of_Answers: string[];\n  List_of_Questions: string[];", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "25ac4852-7725-4922-ae30-f96bdc9a8b06": {"__data__": {"id_": "25ac4852-7725-4922-ae30-f96bdc9a8b06", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "f29604628613c3618863bfe4b4ac94ab5fce8df709bab4baee0a8be79892a9d4"}, "2": {"node_id": "64ef9df9-1cef-4190-9dbe-4d221839bd53", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "4d9367a1c08be51bcb6724b799e64d343f832dd7c06ffdfe8c8cd578df848720"}, "3": {"node_id": "450bff9f-0fa2-4857-be79-f2b36c1325e8", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168"}}, "hash": "c46b5393fcb156b87d49b389013bd156295ed84fcf96dc20ca2909a615b3621d", "text": "List_of_Questions: string[];\n  Answer_Date: Date;\n}\n\nexport interface Is_About {\n  Project_id: string;\n  Survey_id: string;\n  Proximity: number;\n}\n\nexport function fetchListOfProjects(): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Project\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectsByCompany(): Promise<any[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT Investment_Company.Name, Project.* \n        FROM Investment_Company \n        JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id \n        JOIN Project ON Invest_In.Project_id = Project.Project_id\n      `;\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows);\n      }\n    });\n  });\n}\n\nexport function fetchSOEs(): Promise<Investment_Company[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Investment_Company WHERE SOE = 'Yes'\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Investment_Company[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectFromRegion(region: string): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    //const db = new sqlite3.Database('new_blog.db');\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT * FROM Project_Table \n        WHERE Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "450bff9f-0fa2-4857-be79-f2b36c1325e8": {"__data__": {"id_": "450bff9f-0fa2-4857-be79-f2b36c1325e8", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "f29604628613c3618863bfe4b4ac94ab5fce8df709bab4baee0a8be79892a9d4"}, "2": {"node_id": "25ac4852-7725-4922-ae30-f96bdc9a8b06", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "c46b5393fcb156b87d49b389013bd156295ed84fcf96dc20ca2909a615b3621d"}}, "hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168", "text": "`;\n    db.all(sql, [region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n            SELECT Project.* \n            FROM Project_Table \n            JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n            WHERE Investment_Company.Name = ? AND Project.Region = ?\n        `;\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ae63060b-94ee-409a-b794-abb38ffb15ca": {"__data__": {"id_": "ae63060b-94ee-409a-b794-abb38ffb15ca", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "3": {"node_id": "3bce2607-c6d5-4cb9-98e0-d4c73092030e", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "text": "import { isDataView } from \"util/types\";\nimport {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n  Invests_In,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "3bce2607-c6d5-4cb9-98e0-d4c73092030e": {"__data__": {"id_": "3bce2607-c6d5-4cb9-98e0-d4c73092030e", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "2": {"node_id": "ae63060b-94ee-409a-b794-abb38ffb15ca", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09"}, "3": {"node_id": "c52153e7-ff09-4dd8-870c-2e07563aaa8d", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c52153e7-ff09-4dd8-870c-2e07563aaa8d": {"__data__": {"id_": "c52153e7-ff09-4dd8-870c-2e07563aaa8d", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "2": {"node_id": "3bce2607-c6d5-4cb9-98e0-d4c73092030e", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchInvestsInByProjectId(\n  projectId: string,\n): Promise<Invests_In[]> {\n  const db = DatabaseService.getInvestsInConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Invests_in WHERE Project_id = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sql, [projectId], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Invests_In[]);\n      }\n    });\n  });\n  return investsInData;\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "95e798f3-d562-4209-98a4-f310b5baba4a": {"__data__": {"id_": "95e798f3-d562-4209-98a4-f310b5baba4a", "embedding": null, "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df49dd8d1060c55ab387af297325057e", "node_type": "4", "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "hash": "144ac3c00fd9b9646467610c7f52c62c0969862b5672a7068971d3225974d595"}}, "hash": "a631a2afe1d0370d0e7c78960aecd37004e64d36a3aa47cbf4ccd709d8f7a071", "text": "import express from \"express\";\nimport cors from \"cors\";\nimport {\n  HandleFlexibleProjects,\n  HandleInvestmentList,\n  HandleInvestmentsByCountry,\n  HandleInvestmentsBySector,\n  HandleListOfCountries,\n  HandleRoot,\n  HandleSectorList,\n  HandleTopCompaniesByInvestmentCount,\n} from \"./handlers\";\nimport { DatabaseService, fetchListOfProjects } from \"./database\";\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\n// Start the database connection\nDatabaseService.getProjectConnection();\nDatabaseService.getInvestsInConnection();\nDatabaseService.getCompanyConnection();\n\napp.get(\"/\", HandleRoot);\napp.get(\"/investments/\", HandleInvestmentList);\napp.get(\"/investments/by_country\", HandleInvestmentsByCountry);\napp.get(\"/investments/by_sector\", HandleInvestmentsBySector);\n\napp.get(\"/companies/top_investments\", HandleTopCompaniesByInvestmentCount);\napp.get(\"/countries\", HandleListOfCountries);\napp.get(\"/sectors\", HandleSectorList);\napp.get(\"/flexible_projects\", HandleFlexibleProjects);\n// app.get(\"/company/details\", HandleCompanyDetails);\n\napp.listen(port, () => {\n  console.log(\"Server running \u26a1\ufe0f\");\n});", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ef33d3b0-6f0d-4580-aaba-9489067a9a6a": {"__data__": {"id_": "ef33d3b0-6f0d-4580-aaba-9489067a9a6a", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "7bad7a10442a804e5cfdd2f4b6c6b827c71e8ac699c0478d22f811971cde0843"}, "3": {"node_id": "e8c554d3-7348-4a37-a56e-d757eb9ba73c", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "fb3608b9de5d4a68a1d6e057966217e8d37278c2ce142085cf4e14a9495eabc7"}}, "hash": "d91736dfcdcb36cc96096aacf7514fbdca83d0808c867e74dfb6979d6384bcc5", "text": "import { Request, Response } from \"express\";\nimport {\n  fetchCompanyData,\n  fetchFlexibleProjects,\n  fetchInvestsInByProjectId,\n  fetchListOfCountries,\n  fetchListOfProjects,\n  fetchListOfSectors,\n  fetchProjectFromCountry,\n  fetchProjectsBySector,\n  fetchTopCompaniesByInvestmentCount,\n} from \"./services\";\n\nexport function HandleRoot(req: Request, res: Response) {\n  res.send({\n    status: \"Sucess\",\n  });\n}\n\nexport async function HandleInvestmentList(req: Request, res: Response) {\n  const queryParams = req.query;\n  const firstStr = queryParams.first as string | undefined;\n  try {\n    let projects = await fetchListOfProjects();\n    if (firstStr) {\n      const n = parseInt(firstStr);\n      if (isNaN(n) || n < 1) {\n        return res.status(400);\n      }\n      projects = projects.slice(0, n);\n    }\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsByCountry(req: Request, res: Response) {\n  const queryParams = req.query;\n  const country = queryParams.country as string;\n  try {\n    let projects = await fetchProjectFromCountry(country);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(400);\n  }\n}\n\nexport async function HandleInvestmentsBySector(req: Request, res: Response) {\n  const queryParams = req.query;\n  const sector = queryParams.sector as string;\n  if (!sector) {\n    return res.status(400).send(\"Sector parameter is required\");\n  }\n  try {\n    const projects = await fetchProjectsBySector(sector);\n    return res.json(projects);\n  } catch (err: any) {\n    return res.sendStatus(500).send(err.message);\n  }\n}\n\nexport async function HandleTopCompaniesByInvestmentCount(\n  req: Request,\n  res: Response,\n) {\n  try {\n    const topCompanies = await fetchTopCompaniesByInvestmentCount();\n    return res.json(topCompanies);\n  } catch (err: any) {\n    console.log(err);\n    return res.sendStatus(500);\n  }\n}\n\nexport async function HandleFlexibleProjects(req: Request, res: Response) {\n  const queryParams = req.query;\n  const options: {\n    filterBy?: { [key: string]: any };\n    sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n    limit?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e8c554d3-7348-4a37-a56e-d757eb9ba73c": {"__data__": {"id_": "e8c554d3-7348-4a37-a56e-d757eb9ba73c", "embedding": null, "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "e5cf56be71008dc2f5772bc0999dc9c9", "node_type": "4", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "7bad7a10442a804e5cfdd2f4b6c6b827c71e8ac699c0478d22f811971cde0843"}, "2": {"node_id": "ef33d3b0-6f0d-4580-aaba-9489067a9a6a", "node_type": "1", "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}, "hash": "d91736dfcdcb36cc96096aacf7514fbdca83d0808c867e74dfb6979d6384bcc5"}}, "hash": "fb3608b9de5d4a68a1d6e057966217e8d37278c2ce142085cf4e14a9495eabc7", "text": ": number;\n  } = {};\n\n  if (queryParams.filterBy) {\n    options.filterBy = JSON.parse(queryParams.filterBy as string);\n  }\n  if (queryParams.sortBy) {\n    options.sortBy = JSON.parse(queryParams.sortBy as string);\n  }\n  if (queryParams.limit) {\n    options.limit = parseInt(queryParams.limit as string);\n  }\n\n  try {\n    const projects = await fetchFlexibleProjects(options);\n    let results = [];\n    for (let i = 0; i < projects.length; i++) {\n      let invests = await fetchInvestsInByProjectId(projects[i].Project_id);\n      if (invests.length > 0) {\n        let project = projects[i] as any;\n        project.Investor = invests[0].Investor;\n        project.Amount = invests[0].Amount;\n        results.push(project);\n      }\n    }\n    return res.json(results);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleListOfCountries(req: Request, res: Response) {\n  try {\n    const countries = await fetchListOfCountries();\n    return res.json(countries);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\nexport async function HandleSectorList(req: Request, res: Response) {\n  try {\n    const sectors = await fetchListOfSectors();\n    return res.json(sectors);\n  } catch (err: any) {\n    return res.status(500).send(err.message);\n  }\n}\n\n// export async function HandleCompanyDetails(req: Request, res: Response) {\n//   const queryParams = req.query;\n//   const companyName = queryParams.name as string;\n//   if (!companyName) {\n//     return res.status(400).send(\"Company name parameter is required\");\n//   }\n//   try {\n//     const companyDetails = await fetchCompanyDetails(companyName);\n//     if (companyDetails) {\n//       return res.json(companyDetails);\n//     } else {\n//       return res.status(404).send(\"Company not found\");\n//     }\n//   } catch (err: any) {\n//     console.log(err);\n//     return res.status(500).send(err.message);\n//   }\n// }\n\nexport async function HandleCompanyData(req: Request, res: Response) {\n  const investor = req.query.name as string;\n  if (!investor) {\n    return res.status(400).send(\"Investor parameter is required\");\n  }\n\n  try {\n    const companyData = await fetchCompanyData(investor);\n    if (companyData) {\n      return res.json(companyData);\n    } else {\n      return res\n        .status(404)\n        .send(\"Company data not found for the provided investor\");\n    }\n  } catch (err: any) {\n    console.log(err);\n    return res.status(500).send(err.message);\n  }\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "ef2bec57-2d78-4287-85af-45fe032ea1d3": {"__data__": {"id_": "ef2bec57-2d78-4287-85af-45fe032ea1d3", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "79f22860dc9c56c2407c9cc69b658db9e872daf2cd5958dd51b40497cfbd8bba"}, "3": {"node_id": "845c4001-21fd-4faa-9756-ea16be68dd3b", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "60f283de782e19fef036c9b970b99d3e33de4cd9de1e827f27db96ad31f390db"}}, "hash": "16a987b0d54bce69da35841f89373db66598b8ed5380a55090867994748ce46f", "text": "import sqlite3, { Database } from \"sqlite3\";\n\nexport class DatabaseService {\n  private static projectDB: Database | null = null;\n  private static companyDB: Database | null = null;\n  private static investsDB: Database | null = null;\n\n  public static getProjectConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.projectDB = new sqlite3.Database(\n        \"Project_Table.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static getCompanyConnection(): Database | null {\n    if (!DatabaseService.companyDB) {\n      DatabaseService.companyDB = new sqlite3.Database(\n        \"Investment_Company.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.companyDB;\n  }\n\n  public static getInvestsInConnection(): Database | null {\n    if (!DatabaseService.investsDB) {\n      DatabaseService.investsDB = new sqlite3.Database(\n        \"Invests_in.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.investsDB;\n  }\n\n  public static closeDbConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (DatabaseService.projectDB) {\n        DatabaseService.projectDB.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            DatabaseService.projectDB = null;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\nexport interface Project {\n  Month: string;\n  Year: string;\n  Sector: string;\n  Country: string;\n  Region: string;\n  Greenfield: string;\n  Source: string;\n  Project_id: string;\n}\n\nexport interface Investment_Company {\n  Investor: string;\n  SOE: string;\n}\n\nexport interface CompanyData {\n  Company: Investment_Company;\n  Projects: Project[];\n  Invests_In: Invests_In;\n}\n\nexport interface Invests_In {\n  Project_id: string;\n  Investor: string;\n  Amount: string;\n}\n\nexport interface Survey {\n  Survey_id: string;\n  List_of_Answers: string[];", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "845c4001-21fd-4faa-9756-ea16be68dd3b": {"__data__": {"id_": "845c4001-21fd-4faa-9756-ea16be68dd3b", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "79f22860dc9c56c2407c9cc69b658db9e872daf2cd5958dd51b40497cfbd8bba"}, "2": {"node_id": "ef2bec57-2d78-4287-85af-45fe032ea1d3", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "16a987b0d54bce69da35841f89373db66598b8ed5380a55090867994748ce46f"}, "3": {"node_id": "b809e15b-51da-4f94-832c-4f047b3be29f", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168"}}, "hash": "60f283de782e19fef036c9b970b99d3e33de4cd9de1e827f27db96ad31f390db", "text": "List_of_Answers: string[];\n  List_of_Questions: string[];\n  Answer_Date: Date;\n}\n\nexport interface Is_About {\n  Project_id: string;\n  Survey_id: string;\n  Proximity: number;\n}\n\nexport function fetchListOfProjects(): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Project\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectsByCompany(): Promise<any[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT Investment_Company.Name, Project.* \n        FROM Investment_Company \n        JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id \n        JOIN Project ON Invest_In.Project_id = Project.Project_id\n      `;\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows);\n      }\n    });\n  });\n}\n\nexport function fetchSOEs(): Promise<Investment_Company[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Investment_Company WHERE SOE = 'Yes'\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Investment_Company[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectFromRegion(region: string): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    //const db = new sqlite3.Database('new_blog.db');\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT * FROM Project_Table \n        WHERE Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b809e15b-51da-4f94-832c-4f047b3be29f": {"__data__": {"id_": "b809e15b-51da-4f94-832c-4f047b3be29f", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "79f22860dc9c56c2407c9cc69b658db9e872daf2cd5958dd51b40497cfbd8bba"}, "2": {"node_id": "845c4001-21fd-4faa-9756-ea16be68dd3b", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "60f283de782e19fef036c9b970b99d3e33de4cd9de1e827f27db96ad31f390db"}}, "hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168", "text": "`;\n    db.all(sql, [region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n            SELECT Project.* \n            FROM Project_Table \n            JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n            WHERE Investment_Company.Name = ? AND Project.Region = ?\n        `;\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "496084cc-706c-4f33-b80f-ca3746bc241e": {"__data__": {"id_": "496084cc-706c-4f33-b80f-ca3746bc241e", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ff189852120bf7deadfee3bdb9f2095a0891f5078f0d85cf60fb45ad84483c4d"}, "3": {"node_id": "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "text": "import { isDataView } from \"util/types\";\nimport {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n  Invests_In,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c": {"__data__": {"id_": "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ff189852120bf7deadfee3bdb9f2095a0891f5078f0d85cf60fb45ad84483c4d"}, "2": {"node_id": "496084cc-706c-4f33-b80f-ca3746bc241e", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09"}, "3": {"node_id": "e634bcc1-c362-40ea-9328-6d8b55894aff", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "bcf67bb8001f91d98cc139f16c07209def8fbfcb57f3ab7122bc8c075e17e2e2"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "e634bcc1-c362-40ea-9328-6d8b55894aff": {"__data__": {"id_": "e634bcc1-c362-40ea-9328-6d8b55894aff", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ff189852120bf7deadfee3bdb9f2095a0891f5078f0d85cf60fb45ad84483c4d"}, "2": {"node_id": "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}, "3": {"node_id": "29dd5ff2-caf8-4c21-95ed-583d6845381c", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "03c16f225f8ee3a4596d5f42981c50f4806285280496c8e6f19eae8923788e53"}}, "hash": "bcf67bb8001f91d98cc139f16c07209def8fbfcb57f3ab7122bc8c075e17e2e2", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchInvestsInByProjectId(\n  projectId: string,\n): Promise<Invests_In[]> {\n  const db = DatabaseService.getInvestsInConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Invests_in WHERE Project_id = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sql, [projectId], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Invests_In[]);\n      }\n    });\n  });\n  return investsInData;\n}\n\nexport async function fetchCompanyData(\n  investor: string,\n): Promise<CompanyData | null> {\n  const db = DatabaseService.getCompanyConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const companySql = \"SELECT * FROM Investment_Company WHERE Investor = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "29dd5ff2-caf8-4c21-95ed-583d6845381c": {"__data__": {"id_": "29dd5ff2-caf8-4c21-95ed-583d6845381c", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ff189852120bf7deadfee3bdb9f2095a0891f5078f0d85cf60fb45ad84483c4d"}, "2": {"node_id": "e634bcc1-c362-40ea-9328-6d8b55894aff", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "bcf67bb8001f91d98cc139f16c07209def8fbfcb57f3ab7122bc8c075e17e2e2"}}, "hash": "03c16f225f8ee3a4596d5f42981c50f4806285280496c8e6f19eae8923788e53", "text": "\";\n  const company = await new Promise<Investment_Company | null>(\n    (resolve, reject) => {\n      db.get(companySql, [investor], (err, row) => {\n        if (err) reject(err);\n        else resolve(row as Investment_Company | null);\n      });\n    },\n  );\n\n  if (!company) {\n    return null;\n  }\n\n  const projectsSql = `\n    SELECT Project.* \n    FROM Project_Table\n    JOIN Invests_In ON Project.Project_id = Invests_In.Project_id\n    WHERE Invests_In.Investor = ?\n  `;\n  const projects = await new Promise<Project[]>((resolve, reject) => {\n    db.all(projectsSql, [investor], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  const investsInSql = \"SELECT * FROM Invests_In WHERE Investor = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(investsInSql, [investor], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Invests_In[]);\n    });\n  });\n\n  return {\n    Company: company,\n    Projects: projects,\n    Invests_In: investsInData[0] || null,\n  };\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "262d4856-1246-4acf-b9bb-1e4adf745b68": {"__data__": {"id_": "262d4856-1246-4acf-b9bb-1e4adf745b68", "embedding": null, "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "df49dd8d1060c55ab387af297325057e", "node_type": "4", "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}, "hash": "18af5d7110a9b5280963f2aa8a28d8a16c3b8b95b0c1ae33da253397de524653"}}, "hash": "2d832a34045a4097b280fa04ce5f44e85210799c13706ecc21b3d1428ed04811", "text": "import express from \"express\";\nimport cors from \"cors\";\nimport {\n  HandleCompanyData,\n  HandleFlexibleProjects,\n  HandleInvestmentList,\n  HandleInvestmentsByCountry,\n  HandleInvestmentsBySector,\n  HandleListOfCountries,\n  HandleRoot,\n  HandleSectorList,\n  HandleTopCompaniesByInvestmentCount,\n} from \"./handlers\";\nimport { DatabaseService, fetchListOfProjects } from \"./database\";\n\nconst app = express();\nconst port = 8080;\n\napp.use(cors());\n\n// Start the database connection\nDatabaseService.getProjectConnection();\nDatabaseService.getInvestsInConnection();\nDatabaseService.getCompanyConnection();\n\napp.get(\"/\", HandleRoot);\napp.get(\"/investments/\", HandleInvestmentList);\napp.get(\"/investments/by_country\", HandleInvestmentsByCountry);\napp.get(\"/investments/by_sector\", HandleInvestmentsBySector);\n\napp.get(\"/companies/top_investments\", HandleTopCompaniesByInvestmentCount);\napp.get(\"/countries\", HandleListOfCountries);\napp.get(\"/sectors\", HandleSectorList);\napp.get(\"/flexible_projects\", HandleFlexibleProjects);\napp.get(\"/company/details\", HandleCompanyData);\n// app.get(\"/company/details\", HandleCompanyDetails);\n\napp.listen(port, () => {\n  console.log(\"Server running \u26a1\ufe0f\");\n});", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "b23cc281-b894-451c-a423-593b519c0fe2": {"__data__": {"id_": "b23cc281-b894-451c-a423-593b519c0fe2", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ebf46b5ab042ef6a514df0a2b05abd085d727543d6fc518180d7af5db6f3e016"}, "3": {"node_id": "669b5a27-e9fc-462d-a458-3e12ad832b42", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "text": "import { isDataView } from \"util/types\";\nimport {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n  Invests_In,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "669b5a27-e9fc-462d-a458-3e12ad832b42": {"__data__": {"id_": "669b5a27-e9fc-462d-a458-3e12ad832b42", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ebf46b5ab042ef6a514df0a2b05abd085d727543d6fc518180d7af5db6f3e016"}, "2": {"node_id": "b23cc281-b894-451c-a423-593b519c0fe2", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09"}, "3": {"node_id": "cd03caa6-5252-478c-a1bb-5ee44026ed47", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "60437cfa318186933c62a8688fb221c9d25c5235804195e02883024290421961"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "cd03caa6-5252-478c-a1bb-5ee44026ed47": {"__data__": {"id_": "cd03caa6-5252-478c-a1bb-5ee44026ed47", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ebf46b5ab042ef6a514df0a2b05abd085d727543d6fc518180d7af5db6f3e016"}, "2": {"node_id": "669b5a27-e9fc-462d-a458-3e12ad832b42", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}, "3": {"node_id": "0491232c-1e70-4d46-ae82-8d2df5b158a1", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "c73f870a69147c5d4b991a1d0f90b4449e2484d72b1e9df8d73105400deef644"}}, "hash": "60437cfa318186933c62a8688fb221c9d25c5235804195e02883024290421961", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchInvestsInByProjectId(\n  projectId: string,\n): Promise<Invests_In[]> {\n  const db = DatabaseService.getInvestsInConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Invests_in WHERE Project_id = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sql, [projectId], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Invests_In[]);\n      }\n    });\n  });\n  return investsInData;\n}\n\nexport async function fetchCompanyData(\n  investor: string,\n): Promise<CompanyData | null> {\n  // Use the company connection for the Investment_Company table\n  const companyDb = DatabaseService.getCompanyConnection();\n  if (!companyDb) {\n    throw new Error(\"Company database connection not established\");\n  }\n\n  const companySql = \"SELECT * FROM Investment_Company WHERE Investor = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0491232c-1e70-4d46-ae82-8d2df5b158a1": {"__data__": {"id_": "0491232c-1e70-4d46-ae82-8d2df5b158a1", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "ebf46b5ab042ef6a514df0a2b05abd085d727543d6fc518180d7af5db6f3e016"}, "2": {"node_id": "cd03caa6-5252-478c-a1bb-5ee44026ed47", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "60437cfa318186933c62a8688fb221c9d25c5235804195e02883024290421961"}}, "hash": "c73f870a69147c5d4b991a1d0f90b4449e2484d72b1e9df8d73105400deef644", "text": "\";\n  const company = await new Promise<Investment_Company | null>(\n    (resolve, reject) => {\n      companyDb.get(companySql, [investor], (err, row) => {\n        if (err) reject(err);\n        else resolve(row as Investment_Company | null);\n      });\n    },\n  );\n\n  if (!company) {\n    return null;\n  }\n\n  // Use the project connection for the Project_Table table\n  const projectDb = DatabaseService.getProjectConnection();\n  if (!projectDb) {\n    throw new Error(\"Project database connection not established\");\n  }\n\n  const projectsSql = `\n    SELECT Project.* \n    FROM Project_Table\n    JOIN Invests_In ON Project.Project_id = Invests_In.Project_id\n    WHERE Invests_In.Investor = ?\n  `;\n  const projects = await new Promise<Project[]>((resolve, reject) => {\n    projectDb.all(projectsSql, [investor], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  const investsInSql = \"SELECT * FROM Invests_In WHERE Investor = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    projectDb.all(investsInSql, [investor], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Invests_In[]);\n    });\n  });\n\n  return {\n    Company: company,\n    Projects: projects,\n    Invests_In: investsInData[0] || null,\n  };\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "2a36740e-bbe2-4134-be18-83ab2252d311": {"__data__": {"id_": "2a36740e-bbe2-4134-be18-83ab2252d311", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "3": {"node_id": "72678266-ebed-4917-a607-d89bebe44d5a", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "text": "import { isDataView } from \"util/types\";\nimport {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n  Invests_In,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "72678266-ebed-4917-a607-d89bebe44d5a": {"__data__": {"id_": "72678266-ebed-4917-a607-d89bebe44d5a", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "2": {"node_id": "2a36740e-bbe2-4134-be18-83ab2252d311", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09"}, "3": {"node_id": "5b645f5a-5ff0-40b9-8385-3bc3644a328c", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "5b645f5a-5ff0-40b9-8385-3bc3644a328c": {"__data__": {"id_": "5b645f5a-5ff0-40b9-8385-3bc3644a328c", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2375ab0ea883475b2e564798b3a82aa59c2f6d7e8d8b6c2bad4ab9d8f1ba9d4c"}, "2": {"node_id": "72678266-ebed-4917-a607-d89bebe44d5a", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchInvestsInByProjectId(\n  projectId: string,\n): Promise<Invests_In[]> {\n  const db = DatabaseService.getInvestsInConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Invests_in WHERE Project_id = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sql, [projectId], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Invests_In[]);\n      }\n    });\n  });\n  return investsInData;\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "f2bae661-9cf4-4f56-b068-2a9e627b6520": {"__data__": {"id_": "f2bae661-9cf4-4f56-b068-2a9e627b6520", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "6e86a9c7da6bc35067d70819012966120a718eb8a1c302ee5bb66003dfe68258"}, "3": {"node_id": "89906649-4ed7-4b32-8b21-222a486532cf", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "201f189fee0c54f7d3f162632ebf21616ec6da30821729fd244206088abe7d43"}}, "hash": "e650d9bd50df83e5920b265284a494f702c1de36cb089f1310fb022107e301e9", "text": "import sqlite3, { Database } from \"sqlite3\";\n\nexport class DatabaseService {\n  private static projectDB: Database | null = null;\n  private static companyDB: Database | null = null;\n  private static investsDB: Database | null = null;\n\n  public static getProjectConnection(): Database | null {\n    if (!DatabaseService.projectDB) {\n      DatabaseService.projectDB = new sqlite3.Database(\n        \"Project_Table.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.projectDB;\n  }\n\n  public static getCompanyConnection(): Database | null {\n    if (!DatabaseService.companyDB) {\n      DatabaseService.companyDB = new sqlite3.Database(\n        \"Investment_Company.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n\n            // Attach other databases\n            if (!DatabaseService.companyDB) {\n              return;\n            }\n            DatabaseService.companyDB.exec(\n              `\n            ATTACH DATABASE 'Project_Table.db' AS ProjectDB;\n            ATTACH DATABASE 'Invests_in.db' AS InvestsDB;\n          `,\n              (attachErr) => {\n                if (attachErr)\n                  console.error(\"Error attaching databases\", attachErr);\n              },\n            );\n          }\n        },\n      );\n    }\n    return DatabaseService.companyDB;\n  }\n\n  public static getInvestsInConnection(): Database | null {\n    if (!DatabaseService.investsDB) {\n      DatabaseService.investsDB = new sqlite3.Database(\n        \"Invests_in.db\",\n        (err) => {\n          if (err) {\n            console.error(\"Error opening database\", err);\n          } else {\n            console.log(\"Database connection established\");\n          }\n        },\n      );\n    }\n    return DatabaseService.investsDB;\n  }\n\n  public static closeDbConnection(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (DatabaseService.projectDB) {\n        DatabaseService.projectDB.close((err) => {\n          if (err) {\n            reject(err);", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "89906649-4ed7-4b32-8b21-222a486532cf": {"__data__": {"id_": "89906649-4ed7-4b32-8b21-222a486532cf", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "6e86a9c7da6bc35067d70819012966120a718eb8a1c302ee5bb66003dfe68258"}, "2": {"node_id": "f2bae661-9cf4-4f56-b068-2a9e627b6520", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "e650d9bd50df83e5920b265284a494f702c1de36cb089f1310fb022107e301e9"}, "3": {"node_id": "7b14c07c-308b-48da-befb-41882100471a", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "7c0ccb4b43b487ec70ba6e6d9e32bad784a8c9085f6af925cf5aff534e479195"}}, "hash": "201f189fee0c54f7d3f162632ebf21616ec6da30821729fd244206088abe7d43", "text": "} else {\n            DatabaseService.projectDB = null;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n}\n\nexport interface Project {\n  Month: string;\n  Year: string;\n  Sector: string;\n  Country: string;\n  Region: string;\n  Greenfield: string;\n  Source: string;\n  Project_id: string;\n}\n\nexport interface Investment_Company {\n  Investor: string;\n  SOE: string;\n}\n\nexport interface CompanyData {\n  Company: Investment_Company;\n  Projects: Project[];\n  Invests_In: Invests_In;\n}\n\nexport interface Invests_In {\n  Project_id: string;\n  Investor: string;\n  Amount: string;\n}\n\nexport interface Survey {\n  Survey_id: string;\n  List_of_Answers: string[];\n  List_of_Questions: string[];\n  Answer_Date: Date;\n}\n\nexport interface Is_About {\n  Project_id: string;\n  Survey_id: string;\n  Proximity: number;\n}\n\nexport function fetchListOfProjects(): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Project\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectsByCompany(): Promise<any[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT Investment_Company.Name, Project.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "7b14c07c-308b-48da-befb-41882100471a": {"__data__": {"id_": "7b14c07c-308b-48da-befb-41882100471a", "embedding": null, "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "904c69084aa63ff00ece82524e1af5c5", "node_type": "4", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "6e86a9c7da6bc35067d70819012966120a718eb8a1c302ee5bb66003dfe68258"}, "2": {"node_id": "89906649-4ed7-4b32-8b21-222a486532cf", "node_type": "1", "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}, "hash": "201f189fee0c54f7d3f162632ebf21616ec6da30821729fd244206088abe7d43"}}, "hash": "7c0ccb4b43b487ec70ba6e6d9e32bad784a8c9085f6af925cf5aff534e479195", "text": "Name, Project.* \n        FROM Investment_Company \n        JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id \n        JOIN Project ON Invest_In.Project_id = Project.Project_id\n      `;\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows);\n      }\n    });\n  });\n}\n\nexport function fetchSOEs(): Promise<Investment_Company[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    //const db = new sqlite3.Database('new_blog.db');\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = \"SELECT * FROM Investment_Company WHERE SOE = 'Yes'\";\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Investment_Company[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectFromRegion(region: string): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    //const db = new sqlite3.Database('new_blog.db');\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n        SELECT * FROM Project_Table \n        WHERE Region = ?\n      `;\n    db.all(sql, [region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  return new Promise((resolve, reject) => {\n    const db = DatabaseService.getProjectConnection();\n    if (!db) {\n      reject(new Error(\"Database connection not established\"));\n      return;\n    }\n\n    const sql = `\n            SELECT Project.* \n            FROM Project_Table \n            JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n            WHERE Investment_Company.Name = ? AND Project.Region = ?\n        `;\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "0ba57289-01ef-438a-8f8a-f905c333834a": {"__data__": {"id_": "0ba57289-01ef-438a-8f8a-f905c333834a", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2b88f44e410789f5561479b283485e127210871a7f0d8aeb71d12ca31a7d545f"}, "3": {"node_id": "412a8de9-6338-4319-8324-e3a07a664588", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "text": "import { isDataView } from \"util/types\";\nimport {\n  Project,\n  Investment_Company,\n  DatabaseService,\n  CompanyData,\n  Invests_In,\n} from \"./database\";\n\nexport async function fetchListOfProjects(): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) {\n        console.log(err);\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n  return rows;\n}\n\nexport async function fetchSOEs(): Promise<Investment_Company[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Investment_Company WHERE SOE = TRUE\";\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function doThing() {\n  return 1;\n}\n\nexport async function fetchProjectFromRegion(\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Region = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [region], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectFromCountry(\n  country: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project_Table WHERE Country = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [country], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchProjectByCompanyByRegion(\n  companyName: string,\n  region: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n      SELECT Project.* \n      FROM Project \n      JOIN Investment_Company ON Project.Company_id = Investment_Company.Company_id\n      WHERE Investment_Company.Investor = ? AND Project.Region = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "412a8de9-6338-4319-8324-e3a07a664588": {"__data__": {"id_": "412a8de9-6338-4319-8324-e3a07a664588", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2b88f44e410789f5561479b283485e127210871a7f0d8aeb71d12ca31a7d545f"}, "2": {"node_id": "0ba57289-01ef-438a-8f8a-f905c333834a", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09"}, "3": {"node_id": "030989c0-f7db-43a1-9154-d816739dd129", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "b9a21b70cda7e96ad460ba5508c85f281a10b0650cd6469396a6f1f9540e8f4d"}}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "text": "AND Project.Region = ?\n  `;\n\n  return new Promise((resolve, reject) => {\n    db.all(sql, [companyName, region], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Project[]);\n      }\n    });\n  });\n}\n\nexport async function fetchProjectsBySector(\n  sector: string,\n): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Project WHERE Sector = ?\";\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, [sector], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchTopCompaniesByInvestmentCount(): Promise<\n  Investment_Company[]\n> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = `\n    SELECT Investment_Company.*, COUNT(Invest_In.Company_id) as InvestmentCount\n    FROM Investment_Company\n    JOIN Invest_In ON Investment_Company.Company_id = Invest_In.Company_id\n    GROUP BY Investment_Company.Company_id\n    ORDER BY InvestmentCount DESC\n    LIMIT 10\n  `;\n  const rows = await new Promise<Investment_Company[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Investment_Company[]);\n    });\n  });\n  return rows;\n}\n\nexport async function fetchFlexibleProjects(options?: {\n  filterBy?: { [key: string]: any };\n  sortBy?: { column: string; order: \"ASC\" | \"DESC\" };\n  limit?: number;\n}): Promise<Project[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  let sql = \"SELECT * FROM Project_Table\";\n  const params: any[] = [];\n\n  // Apply filters if any\n  if (options?.filterBy) {\n    const filterKeys = Object.keys(options.filterBy);\n    if (filterKeys.length > 0) {\n      const filterClauses = filterKeys.map((key) => {\n        params.push(options.filterBy![key]);\n        return `${key} = ?`;\n      });\n      sql += \" WHERE \" + filterClauses.join(\" AND \");\n    }\n  }\n\n  // Apply sorting if provided\n  if (options?.sortBy) {\n    sql += ` ORDER BY ${options.sortBy.column} ${options.sortBy.order}`;\n  }\n\n  // Apply limit if provided\n  if (options?.limit) {\n    sql += \" LIMIT ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "030989c0-f7db-43a1-9154-d816739dd129": {"__data__": {"id_": "030989c0-f7db-43a1-9154-d816739dd129", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2b88f44e410789f5561479b283485e127210871a7f0d8aeb71d12ca31a7d545f"}, "2": {"node_id": "412a8de9-6338-4319-8324-e3a07a664588", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22"}, "3": {"node_id": "1a35fc78-8cf8-4930-8246-df20e441bf34", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "a5c387786f6a44bad12ce1d8e0fbd67e982e922bf68a0644fcbd1c347c1b110f"}}, "hash": "b9a21b70cda7e96ad460ba5508c85f281a10b0650cd6469396a6f1f9540e8f4d", "text": "\";\n    params.push(options.limit);\n  }\n\n  const rows = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sql, params, (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  return rows;\n}\n\nexport async function fetchListOfCountries(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Country FROM Project_Table\";\n  const countries = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const countryList = rows.map((row: any) => row.Country);\n        resolve(countryList);\n      }\n    });\n  });\n  return countries;\n}\n\nexport async function fetchListOfSectors(): Promise<string[]> {\n  const db = DatabaseService.getProjectConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT DISTINCT Sector FROM Project_Table\";\n  const sectors = await new Promise<string[]>((resolve, reject) => {\n    db.all(sql, [], (err, rows) => {\n      if (err) reject(err);\n      else {\n        const sectorList = rows.map((row: any) => row.Sector);\n        resolve(sectorList);\n      }\n    });\n  });\n  return sectors;\n}\n\n// export async function fetchCompanyDetails(\n//   companyName: string,\n// ): Promise<Investment_Company | null> {\n//   const db = DatabaseService.getDbConnection();\n//   if (!db) {\n//     throw new Error(\"Database connection not established\");\n//   }\n//\n//   const sql = \"SELECT * FROM Investment_Company WHERE Investor = ?\";\n//   const company = await new Promise<Investment_Company | null>(\n//     (resolve, reject) => {\n//       db.get(sql, [companyName], (err, row) => {\n//         if (err) reject(err);\n//         else resolve(row as Investment_Company | null);\n//       });\n//     },\n//   );\n//   return company;\n// }\n\nexport async function fetchInvestsInByProjectId(\n  projectId: string,\n): Promise<Invests_In[]> {\n  const db = DatabaseService.getInvestsInConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sql = \"SELECT * FROM Invests_in WHERE Project_id = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sql, [projectId], (err, rows) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(rows as Invests_In[]);\n      }\n    });\n  });\n  return investsInData;\n}\n\nexport async function fetchCompanyData(\n  investorName: string,\n): Promise<CompanyData | null> {\n  const db = DatabaseService.getCompanyConnection();\n  if (!db) {\n    throw new Error(\"Database connection not established\");\n  }\n\n  const sqlCompany = \"SELECT * FROM Investment_Company WHERE Investor = ?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}, "1a35fc78-8cf8-4930-8246-df20e441bf34": {"__data__": {"id_": "1a35fc78-8cf8-4930-8246-df20e441bf34", "embedding": null, "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "excluded_embed_metadata_keys": [], "excluded_llm_metadata_keys": [], "relationships": {"1": {"node_id": "b8b0132f27d6810f86a2f10e568ee956", "node_type": "4", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "2b88f44e410789f5561479b283485e127210871a7f0d8aeb71d12ca31a7d545f"}, "2": {"node_id": "030989c0-f7db-43a1-9154-d816739dd129", "node_type": "1", "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}, "hash": "b9a21b70cda7e96ad460ba5508c85f281a10b0650cd6469396a6f1f9540e8f4d"}}, "hash": "a5c387786f6a44bad12ce1d8e0fbd67e982e922bf68a0644fcbd1c347c1b110f", "text": "\";\n  const company = await new Promise<Investment_Company | null>(\n    (resolve, reject) => {\n      db.get(sqlCompany, [investorName], (err, row) => {\n        if (err) reject(err);\n        else resolve(row as Investment_Company | null);\n      });\n    },\n  );\n\n  if (!company) {\n    return null;\n  }\n\n  const sqlProjects = `\n  SELECT Project.*\n  FROM ProjectDB.Project_Table AS Project\n  JOIN InvestsDB.Invests_In ON Project.Project_id = InvestsDB.Invests_In.Project_id\n  WHERE InvestsDB.Invests_In.Investor = ?\n`;\n  const projects = await new Promise<Project[]>((resolve, reject) => {\n    db.all(sqlProjects, [investorName], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Project[]);\n    });\n  });\n\n  const sqlInvestsIn = \"SELECT * FROM Invests_In WHERE Investor = ?\";\n  const investsInData = await new Promise<Invests_In[]>((resolve, reject) => {\n    db.all(sqlInvestsIn, [investorName], (err, rows) => {\n      if (err) reject(err);\n      else resolve(rows as Invests_In[]);\n    });\n  });\n\n  return {\n    Company: company,\n    Projects: projects,\n    Invests_In: investsInData[0], // Assuming we want the first investment data\n  };\n}", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n"}, "__type__": "1"}}, "docstore/ref_doc_info": {"ffbd3772be303d0e9a7ad6312816252f": {"node_ids": ["ac9b8bea-9c02-480e-9a8b-102a42d87e21"], "metadata": {"file_name": "index.d.ts", "relative_path": "node_modules/agentkeepalive/index.d.ts"}}, "e5cf56be71008dc2f5772bc0999dc9c9": {"node_ids": ["c228d486-0d00-4103-a9f5-bfde0af0363c", "8d2b90d4-f4a6-4cc8-bf3a-69cf52195ce3", "0dc10091-dec1-4c1f-ba92-1b63dfcd1f29", "733398b2-b7ee-4130-8403-c0ce7fa361e0", "ef33d3b0-6f0d-4580-aaba-9489067a9a6a", "e8c554d3-7348-4a37-a56e-d757eb9ba73c"], "metadata": {"file_name": "handlers.ts", "relative_path": "src/handlers.ts"}}, "904c69084aa63ff00ece82524e1af5c5": {"node_ids": ["941ebfa8-9f4d-4aff-930a-af76eaa0ea69", "9db35748-60f4-4d18-bcf2-57bbdedac0dc", "2a8b320d-349a-4d6d-87a1-6431333322b3", "64ef9df9-1cef-4190-9dbe-4d221839bd53", "25ac4852-7725-4922-ae30-f96bdc9a8b06", "450bff9f-0fa2-4857-be79-f2b36c1325e8", "ef2bec57-2d78-4287-85af-45fe032ea1d3", "845c4001-21fd-4faa-9756-ea16be68dd3b", "b809e15b-51da-4f94-832c-4f047b3be29f", "f2bae661-9cf4-4f56-b068-2a9e627b6520", "89906649-4ed7-4b32-8b21-222a486532cf", "7b14c07c-308b-48da-befb-41882100471a"], "metadata": {"file_name": "database.ts", "relative_path": "src/database.ts"}}, "b8b0132f27d6810f86a2f10e568ee956": {"node_ids": ["1d561073-6bf0-48f8-9f23-e1d590fa84c2", "d41748c9-970f-426a-9386-708fe3d6f8e5", "896db9db-4a4c-4038-b915-360b4e18cbbd", "14f312b4-e2ae-435d-b985-620d96c34bf2", "ae63060b-94ee-409a-b794-abb38ffb15ca", "3bce2607-c6d5-4cb9-98e0-d4c73092030e", "c52153e7-ff09-4dd8-870c-2e07563aaa8d", "496084cc-706c-4f33-b80f-ca3746bc241e", "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c", "e634bcc1-c362-40ea-9328-6d8b55894aff", "29dd5ff2-caf8-4c21-95ed-583d6845381c", "b23cc281-b894-451c-a423-593b519c0fe2", "669b5a27-e9fc-462d-a458-3e12ad832b42", "cd03caa6-5252-478c-a1bb-5ee44026ed47", "0491232c-1e70-4d46-ae82-8d2df5b158a1", "2a36740e-bbe2-4134-be18-83ab2252d311", "72678266-ebed-4917-a607-d89bebe44d5a", "5b645f5a-5ff0-40b9-8385-3bc3644a328c", "0ba57289-01ef-438a-8f8a-f905c333834a", "412a8de9-6338-4319-8324-e3a07a664588", "030989c0-f7db-43a1-9154-d816739dd129", "1a35fc78-8cf8-4930-8246-df20e441bf34"], "metadata": {"file_name": "services.ts", "relative_path": "src/services.ts"}}, "df49dd8d1060c55ab387af297325057e": {"node_ids": ["a8b2c7be-2c0c-432b-adb3-0241c5490eba", "95e798f3-d562-4209-98a4-f310b5baba4a", "262d4856-1246-4acf-b9bb-1e4adf745b68"], "metadata": {"file_name": "server.ts", "relative_path": "src/server.ts"}}}, "docstore/metadata": {"ac9b8bea-9c02-480e-9a8b-102a42d87e21": {"doc_hash": "52516dfdd3aefc1cc1f55fcb5350d9b8b8225df3d3851f8a22895d69caa03bd4", "ref_doc_id": "ffbd3772be303d0e9a7ad6312816252f"}, "c228d486-0d00-4103-a9f5-bfde0af0363c": {"doc_hash": "00c88aca893567d6c290e00e531bdfdc44664b27fb3652ea41a113943b5dd5ef", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "8d2b90d4-f4a6-4cc8-bf3a-69cf52195ce3": {"doc_hash": "0ece4a5bf6f0d23b6a3a42b84eb45fecc3d308dd589e10a709e6b7f86c95680f", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "941ebfa8-9f4d-4aff-930a-af76eaa0ea69": {"doc_hash": "dfdec3c5df4f0b37139712ca77a6d3516782099d5d2d6ab80d581674745ea7cf", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "9db35748-60f4-4d18-bcf2-57bbdedac0dc": {"doc_hash": "55fa5c570637da09c5f42f16ff48371ecdae310311dae320b1ee72babe79027f", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "2a8b320d-349a-4d6d-87a1-6431333322b3": {"doc_hash": "5ae137e93968d963ec7e8aa288a5346809f7cc98420d5dde8d4692880c4d54c9", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "1d561073-6bf0-48f8-9f23-e1d590fa84c2": {"doc_hash": "9de903287aae0b6c67c0dec92ef8256e29e0d1f247e47cdbd3e048fc3e2ec147", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "d41748c9-970f-426a-9386-708fe3d6f8e5": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "896db9db-4a4c-4038-b915-360b4e18cbbd": {"doc_hash": "5e5303577246a49868cd1622d24ea5296b20993ca8a2c2b118de324867aacb5f", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "14f312b4-e2ae-435d-b985-620d96c34bf2": {"doc_hash": "340be3d32b1da3f382c3a87ebb33681ecc0f80285004e5fe41d8c8a091c3dbb4", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "a8b2c7be-2c0c-432b-adb3-0241c5490eba": {"doc_hash": "db8b603f4410148a5876f3c9e6b43d5b692f63f8c62706cfef0a2c296b190f18", "ref_doc_id": "df49dd8d1060c55ab387af297325057e"}, "0dc10091-dec1-4c1f-ba92-1b63dfcd1f29": {"doc_hash": "7d7ad8ba128336f69e2ea8403a1b6a3623da3a9215a61bc105fb757382bf77e3", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "733398b2-b7ee-4130-8403-c0ce7fa361e0": {"doc_hash": "7173593847a6985f302ea5a7a62938a6bed3bc83bb0e1204092dead96ecb8cc1", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "64ef9df9-1cef-4190-9dbe-4d221839bd53": {"doc_hash": "4d9367a1c08be51bcb6724b799e64d343f832dd7c06ffdfe8c8cd578df848720", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "25ac4852-7725-4922-ae30-f96bdc9a8b06": {"doc_hash": "c46b5393fcb156b87d49b389013bd156295ed84fcf96dc20ca2909a615b3621d", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "450bff9f-0fa2-4857-be79-f2b36c1325e8": {"doc_hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "ae63060b-94ee-409a-b794-abb38ffb15ca": {"doc_hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "3bce2607-c6d5-4cb9-98e0-d4c73092030e": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "c52153e7-ff09-4dd8-870c-2e07563aaa8d": {"doc_hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "95e798f3-d562-4209-98a4-f310b5baba4a": {"doc_hash": "a631a2afe1d0370d0e7c78960aecd37004e64d36a3aa47cbf4ccd709d8f7a071", "ref_doc_id": "df49dd8d1060c55ab387af297325057e"}, "ef33d3b0-6f0d-4580-aaba-9489067a9a6a": {"doc_hash": "d91736dfcdcb36cc96096aacf7514fbdca83d0808c867e74dfb6979d6384bcc5", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "e8c554d3-7348-4a37-a56e-d757eb9ba73c": {"doc_hash": "fb3608b9de5d4a68a1d6e057966217e8d37278c2ce142085cf4e14a9495eabc7", "ref_doc_id": "e5cf56be71008dc2f5772bc0999dc9c9"}, "ef2bec57-2d78-4287-85af-45fe032ea1d3": {"doc_hash": "16a987b0d54bce69da35841f89373db66598b8ed5380a55090867994748ce46f", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "845c4001-21fd-4faa-9756-ea16be68dd3b": {"doc_hash": "60f283de782e19fef036c9b970b99d3e33de4cd9de1e827f27db96ad31f390db", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "b809e15b-51da-4f94-832c-4f047b3be29f": {"doc_hash": "a11982dd50f9139c92f6a9aa76cd9a092aab4c6c48e5b0b5cbf582c5eb7c5168", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "496084cc-706c-4f33-b80f-ca3746bc241e": {"doc_hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "c129bc5e-3c1f-4f3d-9d52-51d82351fa7c": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "e634bcc1-c362-40ea-9328-6d8b55894aff": {"doc_hash": "bcf67bb8001f91d98cc139f16c07209def8fbfcb57f3ab7122bc8c075e17e2e2", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "29dd5ff2-caf8-4c21-95ed-583d6845381c": {"doc_hash": "03c16f225f8ee3a4596d5f42981c50f4806285280496c8e6f19eae8923788e53", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "262d4856-1246-4acf-b9bb-1e4adf745b68": {"doc_hash": "2d832a34045a4097b280fa04ce5f44e85210799c13706ecc21b3d1428ed04811", "ref_doc_id": "df49dd8d1060c55ab387af297325057e"}, "b23cc281-b894-451c-a423-593b519c0fe2": {"doc_hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "669b5a27-e9fc-462d-a458-3e12ad832b42": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "cd03caa6-5252-478c-a1bb-5ee44026ed47": {"doc_hash": "60437cfa318186933c62a8688fb221c9d25c5235804195e02883024290421961", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "0491232c-1e70-4d46-ae82-8d2df5b158a1": {"doc_hash": "c73f870a69147c5d4b991a1d0f90b4449e2484d72b1e9df8d73105400deef644", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "2a36740e-bbe2-4134-be18-83ab2252d311": {"doc_hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "72678266-ebed-4917-a607-d89bebe44d5a": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "5b645f5a-5ff0-40b9-8385-3bc3644a328c": {"doc_hash": "da1fabeb730c51e0bced57b4f5ec60866da93cdbc5717ab52a41e54458f5d5f7", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "f2bae661-9cf4-4f56-b068-2a9e627b6520": {"doc_hash": "e650d9bd50df83e5920b265284a494f702c1de36cb089f1310fb022107e301e9", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "89906649-4ed7-4b32-8b21-222a486532cf": {"doc_hash": "201f189fee0c54f7d3f162632ebf21616ec6da30821729fd244206088abe7d43", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "7b14c07c-308b-48da-befb-41882100471a": {"doc_hash": "7c0ccb4b43b487ec70ba6e6d9e32bad784a8c9085f6af925cf5aff534e479195", "ref_doc_id": "904c69084aa63ff00ece82524e1af5c5"}, "0ba57289-01ef-438a-8f8a-f905c333834a": {"doc_hash": "30bc851c9ac0c55a3d7302f5f4eaeb05cbc3584787a488a49c792c4fc1a93e09", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "412a8de9-6338-4319-8324-e3a07a664588": {"doc_hash": "d0f810a9ec8cd0c6b54611b73dbacbb0b20c45e50bd785851747f402cb5f8f22", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "030989c0-f7db-43a1-9154-d816739dd129": {"doc_hash": "b9a21b70cda7e96ad460ba5508c85f281a10b0650cd6469396a6f1f9540e8f4d", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}, "1a35fc78-8cf8-4930-8246-df20e441bf34": {"doc_hash": "a5c387786f6a44bad12ce1d8e0fbd67e982e922bf68a0644fcbd1c347c1b110f", "ref_doc_id": "b8b0132f27d6810f86a2f10e568ee956"}}}